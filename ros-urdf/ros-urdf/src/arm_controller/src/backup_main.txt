#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <vector>

int main(int argc, char** argv) {
    ros::init(argc, argv, "joint_state_publisher");
    ros::NodeHandle nh;
    ros::Publisher joint_state_pub = nh.advertise<sensor_msgs::JointState>("/joint_states", 10);
    ros::Rate loop_rate(5); // Adjusted to make movement more visible

    // Variabel untuk mengontrol posisi huruf
    int step = 0;
    std::vector<std::vector<double>> elja_positions = {
        // Gerakan membentuk huruf "E"
        {0.0, 1.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 1.0, 1.0}, {0.0, 1.0, 0.5},
        // Gerakan membentuk huruf "L"
        {0.5, 0.0, 0.0}, {0.5, 0.0, -1.0},
        // Gerakan membentuk huruf "J"
        {0.0, -1.0, 0.5}, {0.0, -1.0, -1.0},
        // Gerakan membentuk huruf "A"
        {0.0, 1.2, 0.0}, {0.5, 1.0, -0.5}, {0.5, 1.0, 0.5}
    };

    while (ros::ok()) {
        sensor_msgs::JointState joint_state;
        joint_state.header.stamp = ros::Time::now();
        joint_state.name = {"hip", "shoulder", "elbow"};
        joint_state.position.resize(3);

        // Set posisi dari daftar posisi ELJA
        joint_state.position[0] = elja_positions[step][0]; // hip angle
        joint_state.position[1] = elja_positions[step][1]; // shoulder angle
        joint_state.position[2] = elja_positions[step][2]; // elbow angle

        // Publish posisi joint
        joint_state_pub.publish(joint_state);
        printf("Step %d: hip=%.2f, shoulder=%.2f, elbow=%.2f\n", step, elja_positions[step][0], elja_positions[step][1], elja_positions[step][2]);

        // Increment step to next position
        step++;
        if (step >= elja_positions.size()) {
            step = 0; // Restart movement
        }

        ros::spinOnce();
        loop_rate.sleep();
    }
    return 0;
}


------------------


#include <ros/ros.h>
#include <sensor_msgs/JointState.h>

int main(int argc, char** argv) {
    ros::init(argc, argv, "joint_state_publisher");
    ros::NodeHandle nh;
    ros::Publisher joint_state_pub = nh.advertise<sensor_msgs::JointState>("/joint_states", 10);
    ros::Rate loop_rate(10);

    // Variabel untuk mengatur sudut joint
    double hip_angle = 0.0;      // Sudut untuk joint hip
    double shoulder_angle = 0.0; // Sudut untuk joint shoulder
    double elbow_angle = 0.0;    // Sudut untuk joint elbow

    while (ros::ok()) {
        sensor_msgs::JointState joint_state;
        joint_state.header.stamp = ros::Time::now();
        joint_state.name.resize(3);
        joint_state.position.resize(joint_state.name.size());
        
        // Menentukan nama dan posisi joint
        joint_state.name = {"hip", "shoulder", "elbow"};
        
        // Mengupdate posisi joint untuk membentuk huruf "L"
        joint_state.position[0] = hip_angle;              // Sudut hip
        joint_state.position[1] = shoulder_angle;         // Sudut shoulder
        joint_state.position[2] = elbow_angle;            // Sudut elbow

        // Mempublikasikan status joint
        joint_state_pub.publish(joint_state);
        printf("Joint state published: hip=%.2f, shoulder=%.2f, elbow=%.2f\n", hip_angle, shoulder_angle, elbow_angle);

        // Mengubah sudut untuk membentuk huruf "L"
        // Misalnya, gerakan ini bisa dibagi dalam beberapa langkah
        if (shoulder_angle < 1.57) { // 90 derajat dalam radian
            shoulder_angle += 0.1; // Menambah sudut shoulder
        }
        if (elbow_angle < 1.57) { // 90 derajat dalam radian
            elbow_angle += 0.1; // Menambah sudut elbow
        }

        ros::spinOnce();
        loop_rate.sleep();
    }
    return 0;
}





------- program 2 ----------





#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <vector>
#include <unistd.h> // Untuk menggunakan fungsi sleep

int main(int argc, char** argv) {
    ros::init(argc, argv, "joint_state_publisher");
    ros::NodeHandle nh;
    ros::Publisher joint_state_pub = nh.advertise<sensor_msgs::JointState>("/joint_states", 10);
    ros::Rate loop_rate(5); // Kecepatan loop untuk gerakan yang lambat

    // Variabel untuk mengontrol posisi huruf dengan jeda di antaranya
    int step = 0;
    std::vector<std::vector<double>> elja_positions = {
        // Gerakan membentuk huruf "E"
        {0.0, 1.0, 0.0}, {0.0, 1.0, -1.0}, {0.0, 1.0, 1.0}, {0.0, 1.0, 0.5},
        // Jeda di antara huruf
        {0.0, 0.0, 0.0},
        // Gerakan membentuk huruf "L"
        {0.5, 0.0, 0.0}, {0.5, 0.0, -1.0},
        // Jeda di antara huruf
        {0.0, 0.0, 0.0},
        // Gerakan membentuk huruf "J"
        {0.0, -1.0, 0.5}, {0.0, -1.0, -1.0},
        // Jeda di antara huruf
        {0.0, 0.0, 0.0},
        // Gerakan membentuk huruf "A"
        {0.0, 1.2, 0.0}, {0.5, 1.0, -0.5}, {0.5, 1.0, 0.5}
    };

    while (ros::ok()) {
        sensor_msgs::JointState joint_state;
        joint_state.header.stamp = ros::Time::now();
        joint_state.name = {"hip", "shoulder", "elbow"};
        joint_state.position.resize(3);

        // Set posisi dari daftar posisi ELJA
        joint_state.position[0] = elja_positions[step][0]; // hip angle
        joint_state.position[1] = elja_positions[step][1]; // shoulder angle
        joint_state.position[2] = elja_positions[step][2]; // elbow angle

        // Publish posisi joint
        joint_state_pub.publish(joint_state);
        printf("Step %d: hip=%.2f, shoulder=%.2f, elbow=%.2f\n", step, elja_positions[step][0], elja_positions[step][1], elja_positions[step][2]);

        // Increment step ke posisi berikutnya, dengan jeda antara gerakan
        step++;
        if (step >= elja_positions.size()) {
            step = 0; // Restart movement setelah selesai menulis "ELJA"
        }

        ros::spinOnce();
        
        // Delay untuk membuat gerakan pelan-pelan
        usleep(500000); // Jeda 500 ms (0.5 detik) antara setiap gerakan
        loop_rate.sleep();
    }
    return 0;
}
